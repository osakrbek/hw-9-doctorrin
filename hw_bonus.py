"""
ðŸ’Ž Exercise-1: Two Sum
Write a function "two_sum(nums: list, target: int) -> tuple" that takes a list of integers
and a target integer. It should return a tuple of two indices whose elements add up to the target.
Assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
two_sum([2, 7, 11, 15], 9) -> (0, 1)
"""


def two_sum(nums: list, target: int) -> tuple:
    seen = {}
    for i, num in enumerate(nums):
        diff = target - num
        if diff in seen:
            return (seen[diff], i)
        seen[num] = i


"""
ðŸ’Ž Exercise-2: Isomorphic Strings
Write a function "is_isomorphic(s: str, t: str) -> bool" that takes two strings s and t
and determines if they are isomorphic. Two strings s and t are isomorphic if the characters
in s can be replaced to get t, and all characters in s map to exactly one character in t and vice versa.

Example:
is_isomorphic('egg', 'add') -> True
"""


def is_isomorphic(s: str, t: str) -> bool:
    return len(set(s)) == len(set(t)) == len(set(zip(s, t)))


"""
ðŸ’Ž Exercise-3: Check Alien Dictionary
Write a function "is_alien_sorted(words: list, order: str) -> bool" that checks if words
are sorted lexicographicaly according to a new character order provided in the string order.

Example:
is_alien_sorted(["hello","leetcode"], "hlabcdefgijkmnopqrstuvwxyz") -> True
"""


def is_alien_sorted(words: list, order: str) -> bool:
    order_map = {char: i for i, char in enumerate(order)}
    for i in range(len(words) - 1):
        for x, y in zip(words[i], words[i + 1]):
            if order_map[x] < order_map[y]:
                break
            elif order_map[x] > order_map[y]:
                return False
        else:
            if len(words[i]) > len(words[i + 1]):
                return False
    return True


"""
ðŸ’Ž Exercise-4: Longest Substring Without Repeating Characters
Write a function "length_of_longest_substring(s: str) -> int" that takes a string s,
and returns the length of the longest substring without repeating characters.

Example:
length_of_longest_substring('abcabcbb') -> 3
"""


def length_of_longest_substring(s: str) -> int:
    char_set = set()
    left = max_length = 0
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_length = max(max_length, right - left + 1)
    return max_length


"""
ðŸ’Ž Exercise-5: Group Shifted Strings
Write a function "group_shifted(strings: list) -> list" that takes a
list of lowercase strings and groups all strings that are generated by shifting some letters
of another string circularly. Return a list of groups, each group is a list of strings.
Groups and strings within a group can be in any order.

Example:
group_shifted(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]) -> [["abc","bcd"],["acef"],["xyz"],["az","ba"],["a","z"]]
"""


def group_shifted(strings: list) -> list:
    def shift_key(string):
        return tuple((ord(c) - ord(string[0])) % 26 for c in string)

    groups = {}
    for string in strings:
        key = shift_key(string)
        if key not in groups:
            groups[key] = []
        groups[key].append(string)

    return list(groups.values())
